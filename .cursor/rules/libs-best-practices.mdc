---
description: 
globs: 
---
# Libs Best Practices

## File Organization
- Keep utility functions organized by domain (`utils.ts`, `maths.ts`, etc.)
- Maintain clear separation of concerns
- Document all exported functions and types
- Include proper TypeScript type definitions

## Utility Functions (`utils.ts`)
- Keep functions pure and side-effect free
- Implement proper error handling
- Include TypeScript type definitions
- Document parameters and return types
- Include usage examples in comments

```typescript
/**
 * Example utility function documentation
 * @param input - Description of input
 * @returns Description of return value
 * @example
 * const result = utilityFunction('input')
 */
export function utilityFunction(input: string): string {
  // Implementation
}
```

## Mathematical Utilities (`maths.ts`)
- Use proper numerical types
- Handle edge cases and invalid inputs
- Document mathematical formulas
- Include unit tests for calculations
- Support both client and server usage

## Type Definitions
### `augment.d.ts`
- Follow TypeScript best practices
- Document type augmentations
- Keep global namespace clean
- Use proper module augmentation

### `reset.d.ts`
- Document reset type purposes
- Follow TypeScript module resolution
- Keep type resets minimal

## Store Management (`store.ts`)
- Implement proper state management patterns
- Include proper type safety
- Document store structure
- Include proper persistence strategies
- Handle SSR appropriately

## Best Practices
- Write pure functions where possible
- Implement proper error handling
- Include comprehensive type definitions
- Document all exports
- Follow functional programming principles
- Implement proper memoization where needed
- Support tree-shaking

## Testing
- Include unit tests for complex utilities
- Test edge cases
- Test type definitions
- Include performance tests where relevant

## Performance
- Implement proper memoization
- Optimize frequently used functions
- Use appropriate data structures
- Implement proper caching strategies

## Usage Examples
```typescript
// Correct way to import utilities
import { utilityFunction } from '~/libs/utils'
import { mathFunction } from '~/libs/maths'
import { store } from '~/libs/store'

// Correct way to use type augmentations
import type { AugmentedType } from '~/libs/augment'
```