---
description: 
globs: 
---
# WebGL Best Practices

## Project Structure
- Organize WebGL components in dedicated directories
- Keep shaders separate from components
- Implement proper TypeScript types
- Document WebGL context usage

## Components
- Use React Three Fiber for React integration
- Implement proper cleanup
- Handle context loss
- Support responsive design

## Performance
- Implement proper geometry instancing
- Use appropriate LOD levels
- Optimize shader complexity
- Handle buffer management

## Best Practices
```typescript
/**
 * Example WebGL component
 */
export function WebGLComponent() {
  const { gl } = useThree()
  
  useEffect(() => {
    // Setup
    return () => {
      // Cleanup
    }
  }, [gl])
  
  return (
    <mesh>
      <boxGeometry />
      <meshStandardMaterial />
    </mesh>
  )
}
```

## Shaders
- Keep shaders modular
- Implement proper uniforms
- Handle precision appropriately
- Support cross-platform compatibility

## Hooks
- Implement proper WebGL hooks
- Handle context management
- Support animations
- Handle cleanup properly

## Utils
- Implement proper math utilities
- Handle matrix transformations
- Support buffer management
- Implement proper debugging

## Integration
### Three.js
- Follow Three.js best practices
- Handle scene management
- Implement proper lighting
- Support post-processing

### React Three Fiber
- Use proper component structure
- Handle state management
- Support suspense
- Implement proper events

## Performance Optimization
- Use proper buffer types
- Implement frustum culling
- Handle texture loading
- Support WebGL2 features

## Memory Management
- Handle texture disposal
- Clean up geometries
- Manage buffer memory
- Handle context loss

## Usage Examples
```typescript
// Importing WebGL components
import { Scene } from '~/webgl/components/scene'
import { useWebGLContext } from '~/webgl/hooks/use-webgl'
import { createBuffer } from '~/webgl/utils/buffer'

// Using WebGL
function App() {
  return (
    <Canvas>
      <Scene>
        <WebGLComponent />
      </Scene>
    </Canvas>
  )
}
```

## Testing
- Test WebGL context
- Test shader compilation
- Test performance
- Test memory leaks

## Documentation
- Document shader usage
- Include performance notes
- Document context requirements
- Provide debugging guides