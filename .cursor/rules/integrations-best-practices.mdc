---
description: 
globs: 
---
# Integrations Best Practices

## Integration Structure
- Keep integrations in separate directories
- Implement proper TypeScript types
- Document API endpoints and methods
- Include proper error handling

## Common Integrations
### Storyblok
- Implement proper content types
- Handle preview mode
- Cache responses appropriately
- Support content versioning

### Shopify
- Implement proper product types
- Handle cart management
- Support checkout flow
- Implement proper inventory management

### HubSpot
- Implement proper form handling
- Handle form submissions
- Support analytics
- Implement proper validation

## API Management
- Use environment variables for credentials
- Implement proper rate limiting
- Handle API versioning
- Cache responses appropriately

## Error Handling
```typescript
/**
 * Example error handling
 */
try {
  const response = await integration.method()
  // Handle success
} catch (error) {
  if (error instanceof IntegrationError) {
    // Handle specific error
  }
  // Handle general error
}
```

## Security
- Never expose API keys in client
- Implement proper authentication
- Handle CORS properly
- Follow security best practices

## Performance
- Implement proper caching
- Use CDN when possible
- Optimize request payloads
- Handle offline scenarios

## Testing
- Test API endpoints
- Test error scenarios
- Test rate limiting
- Test offline behavior

## Documentation
- Document API methods
- Include usage examples
- Document error codes
- Provide troubleshooting guides

## Usage Examples
```typescript
// Storyblok
import { getStoryblokApi } from '~/integrations/storyblok'

// Shopify
import { getShopifyClient } from '~/integrations/shopify'

// HubSpot
import { submitForm } from '~/integrations/hubspot'

// Using integrations
async function getData() {
  const storyblok = getStoryblokApi()
  const content = await storyblok.get('story', { /* options */ })
  
  const shopify = getShopifyClient()
  const products = await shopify.product.list()
  
  await submitForm('formId', { /* data */ })
}
```